
44 INSERT INTO `%s` VALUES ('%d', '%s', '%d')" %(tbl_node, id_sensor, str(name_sensor), interval_sensor)
62 SELECT * FROM `unified-proj`
79 SELECT `id` FROM `%s` WHERE `id`=%d" %(projs[pid]["table_node"], id_sensor)
135 SELECT * FROM `unified-type` WHERE `id` IN (%s)" %(",".join(map(str,tlv.keys())))
191 INSERT INTO `%s` (`node_id`,`server_timestamp`,`timestamp`,`type_id`,`value_num`, `value_str`)%(tbl)
194 VALUES (%s,'%d',%s,%s,NULL,%s)"%(nodeID, time.time(), nodeTime, fields[i], values[i])
196 VALUES (%s,'%d',%s,%s,%s,NULL)"%(nodeID, time.time(), nodeTime, fields[i], values[i])
239 SELECT * FROM `%s` WHERE `id`='%d'"%(nodeTable, sid)
254 SELECT * FROM `unified-type` WHERE `notes` IN (%s)" %(",".join(fields))



def insert_into_db(db, tbl_node, id_sensor, name_sensor, interval_sensor):
    complete_value = {'_id': id_sensor, 'name_sensor': name_sensor, 'interval_sensor': interval_sensor}
    collection = db[tbl_node]
    value_id = collection.insert(complete_value)
    return value_id

def get_value(db, name):
    collection = db[name]
    projs = {}
    count = 0
    for value in collection.find():
        pprint.pprint(value)
        projs[count] = value
        count = count + 1
    return projs

def get_ids(db, name):
    collection = db[name]
    projs = {}
    count = 0
    for value in collection.find():
        pprint.pprint(value['_id'])
        projs[count] = value['_id']
        count = count + 1
    return projs

def in_predicate(db, name, keys): #keys: array
    collection = db[name]
    all_values = {}
    count = 0
    for val in collection.find({"_id":{"$in": keys}}):
        all_values[count] = val
        count = count + 1

def insert_into_db(db, table, node_id, server_timestamp, timestamp, type_id, value_num, value_str):
    complete_value = {'_id': node_id, 'server_timestamp':server_timestamp, 'timestamp': timestamp, 'type_id':type_id, 'value_num':value_num, 'value__str':value__str}
    collection = db[table]
    value_id = collection.insert(complete_value)
    return value_id

def get_value(db, name, sid):
    collection = db[name]
    projs = {}
    count = 0
    for value in collection.find({"_id":sid}):
        pprint.pprint(value)
        projs[count] = value
        count = count + 1
    return projs


def get_value(db, name, notes):
    collection = db[name]
    projs = {}
    count = 0
    for value in collection.find({"notes":{"$in": notes}}):
        pprint.pprint(value)
        projs[count] = value
        count = count + 1
    return projs